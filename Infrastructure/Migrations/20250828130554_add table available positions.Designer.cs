// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DbContextClass))]
    [Migration("20250828130554_add table available positions")]
    partial class addtableavailablepositions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Complement")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<int>("SportsCenterId")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<string>("Uf")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SportsCenterId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Core.AvailablePositions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdSportCourtCategory")
                        .HasColumnType("integer");

                    b.Property<int>("IdSportsCourtAppointments")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<bool>("OpenPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdSportCourtCategory");

                    b.HasIndex("IdSportsCourtAppointments");

                    b.ToTable("AvailablePositions", (string)null);
                });

            modelBuilder.Entity("Core.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cellphone")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Core.CourtEvaluations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IdSportsCourt")
                        .HasColumnType("integer");

                    b.Property<int>("Note")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdSportsCourt");

                    b.ToTable("CourtEvaluations", (string)null);
                });

            modelBuilder.Entity("Core.OpeningHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Friday")
                        .HasColumnType("text");

                    b.Property<string>("Monday")
                        .HasColumnType("text");

                    b.Property<string>("Saturday")
                        .HasColumnType("text");

                    b.Property<int>("SportsCenterId")
                        .HasColumnType("integer");

                    b.Property<string>("Sunday")
                        .HasColumnType("text");

                    b.Property<string>("Thursday")
                        .HasColumnType("text");

                    b.Property<string>("Tuesday")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Wednesday")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SportsCenterId")
                        .IsUnique();

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("Core.SportsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SvgContent")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("SportsCategory", (string)null);
                });

            modelBuilder.Entity("Core.SportsCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cnpj")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("SportsCenter", (string)null);
                });

            modelBuilder.Entity("Core.SportsCenterUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdSportsCenter")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdSportsCenter");

                    b.HasIndex("IdUser");

                    b.ToTable("SportsCenterUsers", (string)null);
                });

            modelBuilder.Entity("Core.SportsCourt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("IdSportsCenter")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SubName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdSportsCenter");

                    b.ToTable("SportsCourt", (string)null);
                });

            modelBuilder.Entity("Core.SportsCourtAppointments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdClient")
                        .HasColumnType("integer");

                    b.Property<int>("IdSportsCourt")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Payment")
                        .HasColumnType("numeric");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdSportsCourt");

                    b.ToTable("SportsCourtAppointments", (string)null);
                });

            modelBuilder.Entity("Core.SportsCourtCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SportsCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("SportsCourtId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SportsCategoryId");

                    b.HasIndex("SportsCourtId");

                    b.ToTable("SportsCourtCategory", (string)null);
                });

            modelBuilder.Entity("Core.SportsCourtImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SportsCourtId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SportsCourtId");

                    b.ToTable("SportsCourtImage", (string)null);
                });

            modelBuilder.Entity("Core.SportsCourtOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdSportsCourt")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdSportsCourt");

                    b.ToTable("SportsCourtOperation", (string)null);
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("IdClient")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueFileName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdClient")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Core.Address", b =>
                {
                    b.HasOne("Core.SportsCenter", "SportsCenter")
                        .WithOne("Address")
                        .HasForeignKey("Core.Address", "SportsCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsCenter");
                });

            modelBuilder.Entity("Core.AvailablePositions", b =>
                {
                    b.HasOne("Core.SportsCourtCategory", "SportsCourtCategory")
                        .WithMany("AvailablePositions")
                        .HasForeignKey("IdSportCourtCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.SportsCourtAppointments", "SportsCourtAppointments")
                        .WithMany("AvailablePositions")
                        .HasForeignKey("IdSportsCourtAppointments")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsCourtAppointments");

                    b.Navigation("SportsCourtCategory");
                });

            modelBuilder.Entity("Core.CourtEvaluations", b =>
                {
                    b.HasOne("Core.SportsCourt", "SportsCourt")
                        .WithMany("CourtEvaluations")
                        .HasForeignKey("IdSportsCourt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsCourt");
                });

            modelBuilder.Entity("Core.OpeningHours", b =>
                {
                    b.HasOne("Core.SportsCenter", "SportsCenter")
                        .WithOne("OpeningHours")
                        .HasForeignKey("Core.OpeningHours", "SportsCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsCenter");
                });

            modelBuilder.Entity("Core.SportsCenterUsers", b =>
                {
                    b.HasOne("Core.SportsCenter", "SportsCenter")
                        .WithMany("SportsCenterUsers")
                        .HasForeignKey("IdSportsCenter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.User", "User")
                        .WithMany("SportsCenterUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsCenter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.SportsCourt", b =>
                {
                    b.HasOne("Core.SportsCenter", "SportsCenter")
                        .WithMany("SportsCourts")
                        .HasForeignKey("IdSportsCenter");

                    b.Navigation("SportsCenter");
                });

            modelBuilder.Entity("Core.SportsCourtAppointments", b =>
                {
                    b.HasOne("Core.Client", "Client")
                        .WithMany("SportsCourtAppointments")
                        .HasForeignKey("IdClient");

                    b.HasOne("Core.SportsCourt", "SportsCourt")
                        .WithMany("SportsCourtAppointments")
                        .HasForeignKey("IdSportsCourt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("SportsCourt");
                });

            modelBuilder.Entity("Core.SportsCourtCategory", b =>
                {
                    b.HasOne("Core.SportsCategory", "SportsCategory")
                        .WithMany("SportsCourtCategories")
                        .HasForeignKey("SportsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.SportsCourt", "SportsCourt")
                        .WithMany("SportsCourtCategories")
                        .HasForeignKey("SportsCourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsCategory");

                    b.Navigation("SportsCourt");
                });

            modelBuilder.Entity("Core.SportsCourtImage", b =>
                {
                    b.HasOne("Core.SportsCourt", "SportsCourt")
                        .WithMany("sportsCourtImages")
                        .HasForeignKey("SportsCourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsCourt");
                });

            modelBuilder.Entity("Core.SportsCourtOperation", b =>
                {
                    b.HasOne("Core.SportsCourt", "SportsCourt")
                        .WithMany("SportsCourtOperations")
                        .HasForeignKey("IdSportsCourt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsCourt");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.HasOne("Core.Client", "Client")
                        .WithOne("User")
                        .HasForeignKey("Core.User", "IdClient");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Core.Client", b =>
                {
                    b.Navigation("SportsCourtAppointments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.SportsCategory", b =>
                {
                    b.Navigation("SportsCourtCategories");
                });

            modelBuilder.Entity("Core.SportsCenter", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("OpeningHours");

                    b.Navigation("SportsCenterUsers");

                    b.Navigation("SportsCourts");
                });

            modelBuilder.Entity("Core.SportsCourt", b =>
                {
                    b.Navigation("CourtEvaluations");

                    b.Navigation("SportsCourtAppointments");

                    b.Navigation("SportsCourtCategories");

                    b.Navigation("SportsCourtOperations");

                    b.Navigation("sportsCourtImages");
                });

            modelBuilder.Entity("Core.SportsCourtAppointments", b =>
                {
                    b.Navigation("AvailablePositions");
                });

            modelBuilder.Entity("Core.SportsCourtCategory", b =>
                {
                    b.Navigation("AvailablePositions");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Navigation("SportsCenterUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
